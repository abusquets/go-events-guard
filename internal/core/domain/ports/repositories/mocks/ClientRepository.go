// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "eventsguard/internal/core/domain/entities"
	dtos "eventsguard/internal/core/dtos"

	errors "eventsguard/internal/app/errors"

	mock "github.com/stretchr/testify/mock"

	pagination "eventsguard/internal/utils/dtos/pagination"

	repositories "eventsguard/internal/core/domain/ports/repositories"
)

// MockClientRepository is an autogenerated mock type for the ClientRepository type
type MockClientRepository struct {
	mock.Mock
}

type MockClientRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientRepository) EXPECT() *MockClientRepository_Expecter {
	return &MockClientRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, clientData
func (_m *MockClientRepository) Create(ctx context.Context, clientData dtos.CreateClientInput) (*entities.Client, *errors.AppError) {
	ret := _m.Called(ctx, clientData)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.Client
	var r1 *errors.AppError
	if rf, ok := ret.Get(0).(func(context.Context, dtos.CreateClientInput) (*entities.Client, *errors.AppError)); ok {
		return rf(ctx, clientData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dtos.CreateClientInput) *entities.Client); ok {
		r0 = rf(ctx, clientData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dtos.CreateClientInput) *errors.AppError); ok {
		r1 = rf(ctx, clientData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.AppError)
		}
	}

	return r0, r1
}

// MockClientRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockClientRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - clientData dtos.CreateClientInput
func (_e *MockClientRepository_Expecter) Create(ctx interface{}, clientData interface{}) *MockClientRepository_Create_Call {
	return &MockClientRepository_Create_Call{Call: _e.mock.On("Create", ctx, clientData)}
}

func (_c *MockClientRepository_Create_Call) Run(run func(ctx context.Context, clientData dtos.CreateClientInput)) *MockClientRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dtos.CreateClientInput))
	})
	return _c
}

func (_c *MockClientRepository_Create_Call) Return(client *entities.Client, error *errors.AppError) *MockClientRepository_Create_Call {
	_c.Call.Return(client, error)
	return _c
}

func (_c *MockClientRepository_Create_Call) RunAndReturn(run func(context.Context, dtos.CreateClientInput) (*entities.Client, *errors.AppError)) *MockClientRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, ID
func (_m *MockClientRepository) GetByID(ctx context.Context, ID string) (*entities.Client, *errors.AppError) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entities.Client
	var r1 *errors.AppError
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.Client, *errors.AppError)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Client); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *errors.AppError); ok {
		r1 = rf(ctx, ID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.AppError)
		}
	}

	return r0, r1
}

// MockClientRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockClientRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *MockClientRepository_Expecter) GetByID(ctx interface{}, ID interface{}) *MockClientRepository_GetByID_Call {
	return &MockClientRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, ID)}
}

func (_c *MockClientRepository_GetByID_Call) Run(run func(ctx context.Context, ID string)) *MockClientRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientRepository_GetByID_Call) Return(_a0 *entities.Client, _a1 *errors.AppError) *MockClientRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientRepository_GetByID_Call) RunAndReturn(run func(context.Context, string) (*entities.Client, *errors.AppError)) *MockClientRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, query
func (_m *MockClientRepository) List(ctx context.Context, query repositories.ClientQuery) (*pagination.PaginatedResult[entities.Client], *errors.AppError) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *pagination.PaginatedResult[entities.Client]
	var r1 *errors.AppError
	if rf, ok := ret.Get(0).(func(context.Context, repositories.ClientQuery) (*pagination.PaginatedResult[entities.Client], *errors.AppError)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.ClientQuery) *pagination.PaginatedResult[entities.Client]); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pagination.PaginatedResult[entities.Client])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.ClientQuery) *errors.AppError); ok {
		r1 = rf(ctx, query)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.AppError)
		}
	}

	return r0, r1
}

// MockClientRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockClientRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - query repositories.ClientQuery
func (_e *MockClientRepository_Expecter) List(ctx interface{}, query interface{}) *MockClientRepository_List_Call {
	return &MockClientRepository_List_Call{Call: _e.mock.On("List", ctx, query)}
}

func (_c *MockClientRepository_List_Call) Run(run func(ctx context.Context, query repositories.ClientQuery)) *MockClientRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.ClientQuery))
	})
	return _c
}

func (_c *MockClientRepository_List_Call) Return(_a0 *pagination.PaginatedResult[entities.Client], _a1 *errors.AppError) *MockClientRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientRepository_List_Call) RunAndReturn(run func(context.Context, repositories.ClientQuery) (*pagination.PaginatedResult[entities.Client], *errors.AppError)) *MockClientRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePartialClient provides a mock function with given fields: ctx, ID, clientData
func (_m *MockClientRepository) UpdatePartialClient(ctx context.Context, ID string, clientData dtos.UpdatePartialClientInput) (*entities.Client, *errors.AppError) {
	ret := _m.Called(ctx, ID, clientData)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePartialClient")
	}

	var r0 *entities.Client
	var r1 *errors.AppError
	if rf, ok := ret.Get(0).(func(context.Context, string, dtos.UpdatePartialClientInput) (*entities.Client, *errors.AppError)); ok {
		return rf(ctx, ID, clientData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, dtos.UpdatePartialClientInput) *entities.Client); ok {
		r0 = rf(ctx, ID, clientData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, dtos.UpdatePartialClientInput) *errors.AppError); ok {
		r1 = rf(ctx, ID, clientData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.AppError)
		}
	}

	return r0, r1
}

// MockClientRepository_UpdatePartialClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePartialClient'
type MockClientRepository_UpdatePartialClient_Call struct {
	*mock.Call
}

// UpdatePartialClient is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
//   - clientData dtos.UpdatePartialClientInput
func (_e *MockClientRepository_Expecter) UpdatePartialClient(ctx interface{}, ID interface{}, clientData interface{}) *MockClientRepository_UpdatePartialClient_Call {
	return &MockClientRepository_UpdatePartialClient_Call{Call: _e.mock.On("UpdatePartialClient", ctx, ID, clientData)}
}

func (_c *MockClientRepository_UpdatePartialClient_Call) Run(run func(ctx context.Context, ID string, clientData dtos.UpdatePartialClientInput)) *MockClientRepository_UpdatePartialClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(dtos.UpdatePartialClientInput))
	})
	return _c
}

func (_c *MockClientRepository_UpdatePartialClient_Call) Return(_a0 *entities.Client, _a1 *errors.AppError) *MockClientRepository_UpdatePartialClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientRepository_UpdatePartialClient_Call) RunAndReturn(run func(context.Context, string, dtos.UpdatePartialClientInput) (*entities.Client, *errors.AppError)) *MockClientRepository_UpdatePartialClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientRepository creates a new instance of MockClientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientRepository {
	mock := &MockClientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
