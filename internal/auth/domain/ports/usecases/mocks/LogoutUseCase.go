// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"
	errors "eventsguard/internal/app/errors"
	entities "eventsguard/internal/auth/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockLogoutUseCase is an autogenerated mock type for the LogoutUseCase type
type MockLogoutUseCase struct {
	mock.Mock
}

type MockLogoutUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogoutUseCase) EXPECT() *MockLogoutUseCase_Expecter {
	return &MockLogoutUseCase_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, token
func (_m *MockLogoutUseCase) Execute(ctx context.Context, token *entities.Token) (bool, *errors.AppError) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	var r1 *errors.AppError
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Token) (bool, *errors.AppError)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Token) bool); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Token) *errors.AppError); ok {
		r1 = rf(ctx, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.AppError)
		}
	}

	return r0, r1
}

// MockLogoutUseCase_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockLogoutUseCase_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - token *entities.Token
func (_e *MockLogoutUseCase_Expecter) Execute(ctx interface{}, token interface{}) *MockLogoutUseCase_Execute_Call {
	return &MockLogoutUseCase_Execute_Call{Call: _e.mock.On("Execute", ctx, token)}
}

func (_c *MockLogoutUseCase_Execute_Call) Run(run func(ctx context.Context, token *entities.Token)) *MockLogoutUseCase_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Token))
	})
	return _c
}

func (_c *MockLogoutUseCase_Execute_Call) Return(_a0 bool, _a1 *errors.AppError) *MockLogoutUseCase_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogoutUseCase_Execute_Call) RunAndReturn(run func(context.Context, *entities.Token) (bool, *errors.AppError)) *MockLogoutUseCase_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogoutUseCase creates a new instance of MockLogoutUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogoutUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogoutUseCase {
	mock := &MockLogoutUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
